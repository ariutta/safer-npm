name: "npm"

description: "Run NPM safely in a fairly restricted jail."
description: ""
description: "The only permitted home directory is the project directory."
description: "The rest of available on the FS files/dires are libs and X-related files/dirs."
description: ""
description: "Run as:"
description: ""
description: "./nsjail --config npm.cfg"

mode: ONCE
#mode: EXECVE
hostname: "NPM"
#cwd: "/home/ariutta/project"

#log_level: DEBUG
log_level: ERROR
#silent: true

# TODO: limit the caps
keep_caps: true
cap: "CAP_SYS_RAWIO"
cap: "CAP_SYS_RESOURCE"
cap: "CAP_SYS_TTY_CONFIG"

clone_newnet: false

#cgroup_mem_max: 100
#cgroup_mem_max: 2000
#cgroup_mem_max: 10000
#cgroup_pids_max: 10

# NPM/Node need memory
# Without setting rlimit_as, running "npm --help" gives an error:
#   Fatal process OOM in heap setup
# TODO: why? 4096 is supposedly the default value
rlimit_as: 4096

# without this (or with it set to the default of 32), we get "npm cb() never called!"
#rlimit_nofile: 512
# I got cb() never called even at 1024 when installing bridgedb
rlimit_nofile: 4096

# without this, we get
# npm ERR! write after end
# npm WARN tar EFBIG: file too large, write
#rlimit_fsize: 1024
# npm couldn't seem to extract react-icon-kit, even with 1024
rlimit_fsize: 4096

#rlimit_as: 4096
#rlimit_cpu: 1000
#rlimit_fsize: 1024
#rlimit_nofile: 512

# inet 10.1.12.34  netmask 255.255.255.0  broadcast 10.1.12.255
#macvlan_iface: "enp0s31f6"
#macvlan_vs_ip: "192.168.10.223"
#macvlan_vs_nm: "255.255.255.0"
#macvlan_vs_gw: "192.168.10.1"

keep_env: false
envar: "HOME"
envar: "PATH"
envar: "TERM=linux"
envar: "TMP=/tmp"
envar: "FONTCONFIG_FILE=/etc/fonts/fonts.conf"
envar: "FC_CONFIG_FILE=/etc/fonts/fonts.conf"

mount_proc: false

mount {
	dst: "/etc"
	fstype: "tmpfs"
	rw: false
	is_bind: false
	mandatory: true
}

# TODO: is there anything we need from src /etc?
#mount {
#	src: "/etc"
#	dst: "/etc"
#	is_bind: true
#	rw: false
#}

mount {
	dst: "/proc"
	fstype: "proc"
	rw: true
	mandatory: true
}

mount {
	dst: "/tmp"
	fstype: "tmpfs"
	rw: true
	is_bind: false
	mandatory: true
}

mount {
	dst: "/usr"
	fstype: "tmpfs"
	rw: false
	is_bind: false
	mandatory: true
}

mount {
	src: "/usr/bin/env"
	dst: "/usr/bin/env"
	is_bind: true
	rw: false
	mandatory: true
}

mount {
	src: "/sys/fs/cgroup/cpu/NSJAIL"
	dst: "/sys/fs/cgroup/cpu/NSJAIL"
	is_bind: true
	rw: true
	mandatory: true
}
mount {
	src: "/sys/fs/cgroup/memory/NSJAIL"
	dst: "/sys/fs/cgroup/memory/NSJAIL"
	is_bind: true
	rw: true
	mandatory: true
}
mount {
	src: "/sys/fs/cgroup/net_cls/NSJAIL"
	dst: "/sys/fs/cgroup/net_cls/NSJAIL"
	is_bind: true
	rw: true
	mandatory: true
}
mount {
	src: "/sys/fs/cgroup/pids/NSJAIL"
	dst: "/sys/fs/cgroup/pids/NSJAIL"
	is_bind: true
	rw: true
	mandatory: true
}

mount {
	src: "/dev/urandom"
	dst: "/dev/urandom"
	is_bind: true
	rw: false
	mandatory: true
}

mount {
	src: "/dev/null"
	dst: "/dev/null"
	is_bind: true
	rw: true
	mandatory: true
}

mount {
	dst: "/dev/shm"
	fstype: "tmpfs"
	rw: false
	is_bind: false
}

mount {
	src_content: "<?xml version=\"1.0\"?>\n<!DOCTYPE fontconfig SYSTEM \"fonts.dtd\">\n<fontconfig><dir>/usr/share/fonts</dir><cachedir>/tmp/fontconfig</cachedir></fontconfig>"
	dst: "/etc/fonts/fonts.conf"
}


mount {
	src_content: "nameserver 8.8.8.8"
	dst: "/etc/resolv.conf"
}

# mounting both /etc/ssl/certs and /etc/static/ssl/certs because 
# /etc/ssl/certs is a symlink to /etc/static/ssl/certs

mount {
	src: "/etc/static/ssl/certs"
	dst: "/etc/static/ssl/certs"
	is_bind: true
	rw: false
}

mount {
	src: "/etc/ssl/certs"
	dst: "/etc/ssl/certs"
	is_bind: true
	rw: false
}

mount {
	src: "/tmp/.X11-unix/X0"
	dst: "/tmp/.X11-unix/X0"
	is_bind: true
}

# mount points required for Nix

mount {
	dst: "/run/user"
	fstype: "tmpfs"
	rw: false
	mandatory: true
}

mount {
	dst: "/run/user/nsjail.1000.root"
	fstype: "tmpfs"
	rw: true
	mandatory: true
}

mount {
	dst: "/run/user/nsjail.1000.tmp"
	fstype: "tmpfs"
	rw: true
	mandatory: true
}

mount {
	src: "/run/wrappers/bin"
	dst: "/run/wrappers/bin"
	is_bind: true
	rw: false
}

mount {
	src: "/run/current-system/sw/bin"
	dst: "/run/current-system/sw/bin"
	is_bind: true
	rw: false
}

mount {
	src: "/nix"
	dst: "/nix"
	is_bind: true
	rw: false
}

mount {
	dst: "/nix/var/nix/profiles/per-user"
	fstype: "tmpfs"
	rw: false
	mandatory: true
}

mount {
	dst: "/nix/var/nix/gcroots/per-user"
	fstype: "tmpfs"
	rw: false
	mandatory: true
}

# mount points for project

mount {
	prefix_dst_env: "HOME"
	dst: ""
	fstype: "tmpfs"
	rw: false
	is_bind: false
	mandatory: true
}

mount {
	prefix_src_env: "HOME"
	src: "/.npmrc"
	prefix_dst_env: "HOME"
	dst: "/.npmrc"
	rw: true
	is_bind: true
	is_dir: false
	mandatory: true
}

mount {
	prefix_src_env: "HOME"
	src: "/.node-gyp"
	prefix_dst_env: "HOME"
	dst: "/.node-gyp"
	rw: true
	is_bind: true
	is_dir: true
	mandatory: true
}

mount {
	prefix_src_env: "HOME"
	src: "/.npm"
	prefix_dst_env: "HOME"
	dst: "/.npm"
	rw: true
	is_bind: true
	is_dir: true
	mandatory: true
}

mount {
	prefix_src_env: "HOME"
	src: "/.config/configstore"
	prefix_dst_env: "HOME"
	dst: "/.config/configstore"
	rw: true
	is_bind: true
	is_dir: true
	mandatory: true
}

# TODO: look at limiting rw here to just these:
# node_modules
# package.json
# package-lock.json
# etc...
mount {
	prefix_src_env: "NSJAIL_NODE_MODULES_PARENT_DIR"
	src: ""
	prefix_dst_env: "HOME"
	dst: "/project"
	rw: true
	is_bind: true
	mandatory: true
}

#seccomp_string: "KILL {"
#seccomp_string: "	ptrace,"
#seccomp_string: "	process_vm_readv,"
#seccomp_string: "	process_vm_writev"
#seccomp_string: "}"
seccomp_string: "DEFAULT ALLOW"
